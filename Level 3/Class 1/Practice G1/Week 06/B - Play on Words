#include <bits/stdc++.h>
#define FIO ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
using namespace std;

vector<bool> vis;
vector<vector<int>> adj;
void dfs(int u) {
    vis[u] = true;
    for (int& v: adj[u]) {
        if (!vis[v])
            dfs(v);
    }
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vis.assign(26, false);
        adj = vector<vector<int>>(26);
        vector<int> in(26), out(26);
        while (n--) {
            string s;
            cin >> s;
            int u = s.front() - 'a';
            int v = s.back() - 'a';
            adj[u].push_back(v);
            out[u]++;
            in[v]++;
        }
        // check degree conditions
        bool valid = true;
        int st = 0, en = 0, stNode = -1;
        for (int i = 0; i < 26; ++i) {
            if ((in[i] || out[i]) && stNode == -1) stNode = i;
            if (abs(in[i] - out[i]) > 1) valid = false;
            else if (out[i] == in[i] + 1) st++, stNode = i;
            else if (in[i] == out[i] + 1) en++;
        }
        valid &= (st == 1 && en == 1) || (!st && !en);
        int cnt = 1;
        dfs(stNode);
        for (int i = 0; i < 26; ++i) {
            if ((in[i] || out[i]) && !vis[i]) {
                dfs(i);
                ++cnt;
            }
        }
        if (cnt > 1)
            valid = false;
        cout << (valid ? "Ordering is possible.\n" : "The door cannot be opened.\n");
    }
    return 0;
}
