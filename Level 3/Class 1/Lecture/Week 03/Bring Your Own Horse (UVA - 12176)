#include <bits/stdc++.h>
#define FIO ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
using namespace std;
typedef long long ll;

struct DSU{
    int n, cnt;
    vector<int> par, sz;
    DSU(int _n) : n(_n), cnt(_n), par(_n), sz(_n) {
        for (int i = 0; i < n; ++i) {
            par[i] = i;
            sz[i] = 1;
        }
    }

    int find_set(int u) {
        if (par[u] == u)
            return u;
        return par[u] = find_set(par[u]);
    }

    bool union_sets(int u, int v) {
        u = find_set(u);
        v = find_set(v);
        if (u == v)
            return false;
        if (sz[u] > sz[v])
            swap(u, v);
        par[u] = v;
        sz[v] += sz[u];
        cnt--;
        return true;
    }
};

vector<vector<pair<int,int>>> adj;

pair<bool,int> dfs(int u, int v, int p = -1) {
    if (u == v)
        return {true, 0};
    bool flag = false;
    int mx = 0;
    for (auto &e: adj[u]) {
        int neig = e.first;
        int c = e.second;
        if (neig == p) continue;
        auto ret = dfs(neig, v, u);
        if (ret.first) {
            mx = max(c, ret.second);
            flag = true;
        }
    }
    return {flag, mx};
}

int main() {
    FIO
    int t;
    cin >> t;
    for (int tc = 1; tc <= t; ++tc) {
        int n, m;
        cin >> n >> m;
        DSU dsu(n);
        adj.resize(n);
        for (int i = 0; i < n; ++i)
            adj[i].clear();

        vector<pair<int, pair<int, int>>> edges;
        for (int i = 0; i < m; ++i) {
            int u, v, c;
            cin >> u >> v >> c;
            edges.push_back({c, {--u, --v}});
        }
        sort(edges.begin(), edges.end());

        for (int i = 0; i < edges.size(); ++i) {
            int c = edges[i].first,
                    u = edges[i].second.first,
                    v = edges[i].second.second;
            if (dsu.union_sets(u, v)) {
                adj[u].push_back({v, c});
                adj[v].push_back({u, c});
            }
        }
        cout << "Case " << tc << "\n";
        int q;
        cin >> q;
        while (q--) {
            int u, v;
            cin >> u >> v;
            --u, --v;
            cout << dfs(u, v).second << "\n";
        }
        cout << "\n";
    }
}
