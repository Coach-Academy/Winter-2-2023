#include <bits/stdc++.h>
#define FIO ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
using namespace std;

int n;
vector<int> deg, vis;
vector<vector<int>> adj;

void dfs(int u) {
    vis[u] = 1;
    for (int v: adj[u]) {
        if (!vis[v])
            dfs(v);
    }
}

bool isConnected() {
    int src = -1;
    for (int i = 0; i < n; ++i) {
        if (!adj[i].empty()) {
            src = i;
            break;
        }
    }
    if (src == -1) // no edges in the graph
        return true;
    dfs(src);
    for (int i = 0; i < n; ++i) {
        if (!vis[i] && !adj[i].empty()) {
            return false;
        }
    }
    return true;
}

int main() {
    FIO
    int m;
    while (cin >> n >> m) {
        adj.resize(n);
        for (int i = 0; i < n; ++i) {
            adj[i].clear();
        }
        deg.assign(n, 0);
        vis.assign(n, 0);
        for (int i = 0; i < m; ++i) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
            deg[u]++;
            deg[v]++;
        }

        int oddDegree = 0;
        for (int i = 0; i < n; ++i) {
            if (deg[i] % 2 != 0) {
                ++oddDegree;
            }
        }

        if (!oddDegree && isConnected() && m != 0) {
            cout << "Possible\n";
        }
        else {
            cout << "Not Possible\n";
        }
    }
}
