#include <bits/stdc++.h>
#define FIO ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
using namespace std;

unordered_map<string, int> id;
unordered_map<int, string> str;
vector<vector<int>> adj;
vector<int> path, edgesCnt;


void euler(int u) {
    while (edgesCnt[u] < adj[u].size()) {
        int v = adj[u][edgesCnt[u]];
        edgesCnt[u]++;
        euler(v);
    }
    path.push_back(u);
}

int main() {
    int n;
    cin >> n;
    adj.resize(2 * n);
    vector<int> in(2 * n), out(2 * n);
    edgesCnt.assign(2 * n, 0);
    int cnt = 0;
    for (int i = 1; i <= n; ++i) {
        string s;
        cin >> s;
        string u = s.substr(0, 2);
        string v = s.substr(1, 2);
        if (id.find(u) == id.end()) {
            id[u] = cnt;
            str[cnt++] = u;
        }
        if (id.find(v) == id.end()) {
            id[v] = cnt;
            str[cnt++] = v;
        }
        adj[id[u]].push_back(id[v]);
        out[id[u]]++;
        in[id[v]]++;
    }
    bool valid = true;
    int st = 0, stCnt = 0, enCnt = 0;
    for (int i = 0; i < cnt; ++i) {
        if (abs(in[i] - out[i]) > 1) valid = false;
        else if (out[i] - in[i] == 1) st = i, stCnt++;
        else if (in[i] - out[i] == 1) enCnt++;
    }
    valid &= (stCnt == 1 && enCnt == 1) || (!stCnt && !enCnt);
    if (!valid) {
        cout << "NO\n";
        return 0;
    }
    euler(st);
    if (path.size() == n + 1) {
        cout << "YES\n";
        for (int i = path.size() - 1; i >= 0; --i) {
            if (i == path.size() - 1)
                cout << str[path[i]];
            else
                cout << str[path[i]][1];
        }
        cout << "\n";
    }
    else cout << "NO\n";
    return 0;
}
