#include <bits/stdc++.h>
#define FIO ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
using namespace std;
typedef long long ll;

struct DSU{
    int n, cnt;
    vector<int> par, sz;
    DSU(int _n) : n(_n), cnt(_n), par(_n), sz(_n) {
        for (int i = 0; i < n; ++i) {
            par[i] = i;
            sz[i] = 1;
        }
    }

    int find_set(int u) {
        if (par[u] == u)
            return u;
        return par[u] = find_set(par[u]);
    }

    void union_sets(int u, int v) {
        u = find_set(u);
        v = find_set(v);
        if (u == v)
            return;
        if (sz[u] > sz[v])
            swap(u, v);
        par[u] = v;
        sz[v] += sz[u];
        cnt--;
    }
};

int main() {
    FIO;
    int t;
    cin >> t;
    while(t--) {
        int n, m;
        cin >> n >> m;
        DSU dsu(n);
        for (int i = 0; i < m; ++i) {
            int u, v;
            cin >> u >> v;
            dsu.union_sets(--u, --v);
        }
        int mx = 0;
        for (int i = 0; i < n; ++i) {
            mx = max(mx, dsu.sz[i]);
        }
        cout << mx << "\n";
    }
}
