#include <bits/stdc++.h>
#define FIO ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
using namespace std;

int n, m;
vector<vector<char>> grid;
vector<vector<int>> dis;

int dx[] = {1, -1, 0, 0};
int dy[] = {0, 0, -1, 1};

void multi_source_shortest_path() {
    queue<pair<int,int>> q;

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (grid[i][j] == '1') {
                q.push({i, j});
                dis[i][j] = 0;
            }
        }
    }

    while (!q.empty()) {
        int sz = q.size();
        while (sz--) {
            int x = q.front().first;
            int y = q.front().second;
            q.pop();

            for (int i = 0; i < 4; ++i) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                if (nx < 0 || nx >= n || ny < 0 || ny >= m || dis[nx][ny] != 1e9) // if not valid or already visited or white
                    continue;

                dis[nx][ny] = dis[x][y] + 1;
                q.push({nx, ny});
            }
        }
    }
}

int main() {
    FIO
    int t;
    cin >> t;
    while (t--) {
        cin >> n >> m;
        grid = vector<vector<char>>(n, vector<char>(m));
        dis = vector<vector<int>>(n, vector<int>(m, 1e9));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                cin >> grid[i][j];
            }
        }
        multi_source_shortest_path();
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j)
                cout << dis[i][j] << " ";
            cout << "\n";
        }
    }
    return 0;
}
